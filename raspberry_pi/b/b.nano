NANO_NAME=raspberry_pi_b
NANO_KERNEL=RPI-B-CONSOLE
NANO_ARCH=armv6
NANO_DRIVE=mmcsd0
NANO_CONFSIZE=131072 # 64MiB
NANO_RAM_ETCSIZE=131072 # 64MiB
NANO_RAM_TMPVARSIZE=131072 # 64MiB
NANO_CODESIZE=524288 # 256MiB
NANO_DATASIZE=0
NANO_SRC=/usr/src
NANO_OBJ=/usr/obj
NANO_MAKE="make"
NANO_PMAKE="make -j4"
NANO_FIRMWARE_DIR="/tmp/nanobsd/firmware/rpi"
NANO_PACKAGE_DIR=/tmp/nanobsd/pkg/rpi/All
NANO_PACKAGE_ABI="FreeBSD:10:armv6"
NANO_PACKAGE_DBDIR="/tmp/nanobsd/pkg/db/rpi"
NANO_PACKAGE_CACHEDIR="/tmp/nanobsd/pkg/cache/rpi"
NANO_PACKAGE_FETCH="
  ca_root_nss
  cfengine36
  cyrus-sasl
  cyrus-sasl-gssapi
  kstart
  krb5
  nss-pam-ldapd-sasl
  pam_mkhomedir
  pkg
  sudo
  tmux
  zabbix24-agent
"

NANO_NEWFS="-m 0 -b 4096 -f 512 -i 8192 -O1"

# 32 MiB partition for u-boot and ubldr
ARM_BOOTSIZE=$((32*1024*1024/512))

# RAM in MiB of Raspberry PI
TOTAL_MEM=512
# MiB dedicated to GPU
GPU_MEM=64
AVAIL_MEM=$((TOTAL_MEM-GPU_MEM))
MEM_HEX=`printf 0x%X ${AVAIL_MEM}`

# update device tree file, set available RAM
echo "Setting RAM to ${AVAIL_MEM} MB"
sed -i .bak "s%reg = <0 0x.*%reg = <0 ${MEM_HEX}>;%" ${NANO_SRC}/sys/boot/fdt/dts/arm/rpi.dts

CONF_INSTALL='
WITHOUT_INSTALLLIB=YES
WITHOUT_TOOLCHAIN=YES
'

CONF_WORLD='
WITHOUT_ACCT=YES
WITHOUT_ACPI=YES
WITHOUT_AMD=YES
WITHOUT_APM=YES
WITHOUT_ASSERT_DEBUG=YES
WITHOUT_AT=YES
WITHOUT_ATF=YES
WITHOUT_ATM=YES
WITHOUT_AUDIT=YES
WITHOUT_AUTHPF=YES
WITHOUT_BIND=YES
WITHOUT_BLUETOOTH=YES
WITHOUT_BSNMP=YES
WITHOUT_CALENDAR=YES
WITHOUT_CAPSICUM=YES
WITHOUT_CDDL=YES
WITHOUT_CTM=YES
WITHOUT_DICT=YES
WITHOUT_EXAMPLES=YES
WITHOUT_FDT=YES
WITHOUT_FLOPPY=YES
WITHOUT_FORTRAN=YES
WITHOUT_FREEBSD_UPDATE=YES
WITHOUT_GAMES=YES
WITHOUT_GCOV=YES
WITHOUT_GDB=YES
WITHOUT_GROFF=YES
WITHOUT_GPIB=YES
WITHOUT_HTML=YES
WITHOUT_INFO=YES
WITHOUT_IPFILTER=YES
WITHOUT_IPFW=YES
WITHOUT_IPX=YES
WITHOUT_JAIL=YES
WITHOUT_KDUMP=YES
WITHOUT_KERNEL_SYMBOLS=YES
WITHOUT_KLDLOAD=YES
WITHOUT_LOCALES=YES
WITHOUT_LOCATE=YES
WITHOUT_LPR=YES
WITHOUT_LS_COLORS=YES
WITHOUT_MAIL=YES
WITHOUT_MAN=YES
WITHOUT_MAN_UTILS=YES
WITHOUT_MISC=YES
WITHOUT_MODULES=YES
WITHOUT_NDIS=YES
WITHOUT_NIS=YES
WITHOUT_NLS=YES
WITHOUT_PC_SYSINSTALL=YES
WITHOUT_PMC=YES
WITHOUT_PORTSNAP=YES
WITHOUT_PPP=YES
WITHOUT_PROFILE=YES
WITHOUT_QUOTAS=YES
WITHOUT_RCMDS=YES
WITHOUT_RCS=YES
WITHOUT_RESCUE=YES
WITHOUT_ROUTED=YES
WITHOUT_SENDMAIL=YES
WITHOUT_SHARE=YES
WITHOUT_SHAREDOCS=YES
WITHOUT_SSP=YES
WITHOUT_SVNLITE=YES
WITHOUT_SYSCONS=YES
WITHOUT_SYSINSTALL=YES
WITHOUT_TEXTPROC=YES
WITHOUT_USB=YES
WITHOUT_WIRELESS=YES
WITHOUT_ZFS=YES
WITHOUT_ZONEINFO=YES
'

FlashDevice generic 8g

cust_data_mount() {
  mkdir -p ${NANO_WORLDDIR}/data
  echo "/dev/${NANO_DRIVE}s4b /data ufs rw,noatime 2 2" >> ${NANO_WORLDDIR}/etc/fstab
}

cust_data_home() {
  ln -s data/home ${NANO_WORLDDIR}/home
}

cust_nobeastie() {
  touch ${NANO_WORLDDIR}/boot/loader.conf
  echo "beastie_disable=\"YES\"" >> ${NANO_WORLDDIR}/boot/loader.conf
}

cust_nosdhcihs() {
  touch ${NANO_WORLDDIR}/boot/loader.conf
  echo "hw.bcm2835.sdhci.hs=0" >> ${NANO_WORLDDIR}/boot/loader.conf
}

build_ubldr ( ) (
  pprint 2 "build ubldr"
  pprint 3 "log: ${NANO_OBJ}/_.ubldr"
  
  (
  export TARGET_ARCH=armv6
  
  cd ${NANO_SRC}
  
  buildenv=`make buildenvvars | sed 's/MACHINE_ARCH=armv6/MACHINE_ARCH=arm/'`
  cd sys/boot
  
  eval $buildenv make UBLDR_LOADADDR=0x2000000 clean obj all
  cd ${NANO_SRC}
  ) > ${NANO_OBJ}/_.ubldr 2>&1
)

build_dtb ( ) (
  pprint 2 "build dtb ($NANO_KERNEL)"
  pprint 3 "log: ${NANO_OBJ}/_.bdtb"
	
  (
  cd ${NANO_SRC}
  
  eval "TARGET_ARCH=${NANO_ARCH} ${NANO_PMAKE} builddtb \
    FDT_DTS_FILE=rpi.dts \
    MACHINE=arm \
    SRCCONF='${SRCCONF}' \
    __MAKE_CONF='${NANO_MAKE_CONF_BUILD}' \
    ${kernconfdir_arg} KERNCONF=${kernconf}"
  ) > ${NANO_OBJ}/_.bdtb 2>&1
)

install_uboot ( ) (
  local dev mnt
  dev=$1
  mnt=$2
  
  cd ${NANO_SRC};
  
  echo "Installing uboot"
  newfs_msdos -L boot -F 16 ${dev}
  mount -t msdosfs ${dev} ${mnt}
  if [ ! -d ${NANO_FIRMWARE_DIR} ]; then
    mkdir -p ${NANO_FIRMWARE_DIR}
  fi
  if [ ! -e ${NANO_FIRMWARE_DIR}/freebsd-uboot-20121129.tar.gz ]; then
    fetch -o ${NANO_FIRMWARE_DIR}/freebsd-uboot-20121129.tar.gz http://people.freebsd.org/~gonzo/arm/rpi/freebsd-uboot-20121129.tar.gz
  fi
  tar -C ${NANO_FIRMWARE_DIR} -zxvf ${NANO_FIRMWARE_DIR}/freebsd-uboot-20121129.tar.gz
  for FILE in boot-ubldr.txt boot.scr bootcode.bin config.txt fixup.dat fixup_cd.dat start.elf start_cd.elf uEnv.txt uboot.img; do
    cp ${NANO_FIRMWARE_DIR}/${FILE} ${mnt}
  done
  cp ${NANO_OBJ}/arm.armv6/${NANO_SRC}/sys/boot/arm/uboot/ubldr ${mnt}
  cp ${NANO_SRC}/rpi ${mnt}/devtree.dat
  echo "device_tree=devtree.dat" >> ${mnt}/config.txt
  echo "device_tree_address=0x100" >> ${mnt}/config.txt
  echo "disable_commandline_tags=1" >> ${mnt}/config.txt
  echo "gpu_mem=${GPU_MEM}" >> ${mnt}/config.txt
  
  umount ${mnt}
  echo "fdt addr 0x100" >> ${NANO_WORLDDIR}/boot/loader.rc
)

create_armv6_diskimage ( ) (
  build_ubldr
  build_dtb
  
  pprint 2 "build diskimage"
  pprint 3 "log: ${NANO_OBJ}/_.di"
  
  (
  sed -i "" "s,${NANO_DRIVE}s3,${NANO_DRIVE}s4a,g" ${NANO_WORLDDIR}/conf/default/etc/remount
  
  if [ ${NANO_CODESIZE} -le 0 ]; then
    NANO_CODESIZE=$(((NANO_MEDIASIZE-NANO_CONFSIZE-ARM_BOOTSIZE)/NANO_IMAGES))
  fi
  if [ ${NANO_DATASIZE} -le 0 ]; then
    NANO_DATASIZE=$((NANO_MEDIASIZE-NANO_CONFSIZE-ARM_BOOTSIZE-NANO_IMAGES*NANO_CODESIZE))
  fi
  
  IMG=${NANO_DISKIMGDIR}/${NANO_IMGNAME}
  MNT=${NANO_OBJ}/_.mnt
  mkdir -p ${MNT}
  
  MKIMG_BOOTSIZE=$((${ARM_BOOTSIZE} * 512))
  MKIMG_CODESIZE=$((${NANO_CODESIZE} * 512))
  MKIMG_CONFSIZE=$((${NANO_CONFSIZE} * 512))
  MKIMG_DATASIZE=$((${NANO_DATASIZE} * 512))
  
  echo "Creating image..."
  mkimg -H ${NANO_HEADS} -P 512 -T ${NANO_SECTS} \
        -s mbr -p fat32::${MKIMG_BOOTSIZE} \
               -p freebsd:-"mkimg -s bsd -p freebsd-ufs::${MKIMG_CODESIZE}" \
               -p freebsd:-"mkimg -s bsd -p freebsd-ufs::${MKIMG_CODESIZE}" \
               -p freebsd:-"mkimg -s bsd -p freebsd-ufs::${MKIMG_CONFSIZE} \
                                         -p freebsd-ufs::${MKIMG_DATASIZE}" \
        -o ${IMG}
  MD=`mdconfig -a -t vnode -f ${IMG}`
  
  trap "echo 'Running exit trap code' ; df -i ${MNT} ; umount ${MNT} || true ; mdconfig -d -u $MD" 1 2 15 EXIT
  
  install_uboot /dev/${MD}s1 ${MNT}
  
  # Create first image
  populate_slice /dev/${MD}s2a ${NANO_WORLDDIR} ${MNT} "s2a"
  mount /dev/${MD}s2a ${MNT}
  echo "Generating mtree..."
  ( cd ${MNT} && mtree -c ) > ${NANO_OBJ}/_.mtree
  ( cd ${MNT} && du -k ) > ${NANO_OBJ}/_.du
  
  for f in ${MNT}/etc/fstab ${MNT}/conf/base/etc/fstab
  do
    sed -i "" "s=${NANO_DRIVE}s1=${NANO_DRIVE}s2=g" $f
    sed -i "" "s=${NANO_DRIVE}s3=${NANO_DRIVE}s4a=g" $f
  done
  
  umount ${MNT}
  
  if [ $NANO_IMAGES -gt 1 -a $NANO_INIT_IMG2 -gt 0 ] ; then
    # Duplicate to second image (if present)
    echo "Duplicating to second image..."
    dd conv=sparse if=/dev/${MD}s2 of=/dev/${MD}s3 bs=64k
    mount /dev/${MD}s3a ${MNT}
    for f in ${MNT}/etc/fstab ${MNT}/conf/base/etc/fstab
    do
      sed -i "" "s=${NANO_DRIVE}s2=${NANO_DRIVE}s3=g" $f
    done
    umount ${MNT}
    # Override the label from the first partition so we
    # don't confuse glabel with duplicates.
    if [ ! -z ${NANO_LABEL} ]; then
      tunefs -L ${NANO_LABEL}"s3a" /dev/${MD}s3a
    fi
  fi
  
  # Create Config slice
  populate_cfg_slice /dev/${MD}s4a "${NANO_CFGDIR}" ${MNT} "s4a"
  
  # Create Data slice, if any.
  populate_data_slice /dev/${MD}s4b "${NANO_DATADIR}" ${MNT} "s4b"
  
  if ${do_copyout_partition} ; then
    echo "Writing out _.disk.image..."
    dd conv=sparse if=/dev/${MD}s2 of=${NANO_DISKIMGDIR}/_.disk.image bs=64k
  fi
  mdconfig -d -u $MD
  
  trap - 1 2 15 EXIT
  
  ) > ${NANO_OBJ}/_.di 2>&1
)

cust_pkgng_fetch ()
{
  rm -rf ${NANO_PACKAGE_DIR}
  mkdir -p ${NANO_PACKAGE_DIR}
  for PKG in ${NANO_PACKAGE_FETCH}; do
    ABI="${NANO_PACKAGE_ABI}" \
    PKG_DBDIR="${NANO_PACKAGE_DBDIR}" \
    PKG_CACHEIDR="${NANO_PACKAGE_CACHEDIR}" \
    pkg fetch -dyo `dirname ${NANO_PACKAGE_DIR}` ${PKG}
  done
}

cust_binmisc_setup()
{
  cp /usr/local/bin/qemu-arm-static ${NANO_WORLDDIR}/usr/bin/
}

cust_binmisc_cleanup()
{
  rm ${NANO_WORLDDIR}/usr/bin/qemu-arm-static
}

cust_fix_files()
{
  sed -i "" "s,\${NANO_DRIVE}s1,\${NANO_DRIVE}s2,g" ${NANO_WORLDDIR}/root/update
  sed -i "" "s,\${NANO_DRIVE}s1,\${NANO_DRIVE}s2,g" ${NANO_WORLDDIR}/root/updatep1
  sed -i "" "s,active -i 1,active -i 2,g"           ${NANO_WORLDDIR}/root/updatep1
  sed -i "" "s,\${NANO_DRIVE}s2,\${NANO_DRIVE}s3,g" ${NANO_WORLDDIR}/root/updatep2
  sed -i "" "s,\${NANO_DRIVE}s1,\${NANO_DRIVE}s2,g" ${NANO_WORLDDIR}/root/updatep2
  sed -i "" "s,active -i 2,active -i 3,g"           ${NANO_WORLDDIR}/root/updatep2
}

last_orders() {
  pprint 2 "compressing disk images"
  pprint 3 "log: ${NANO_OBJ}/_.cdi"
  
  (
  xz -f ${NANO_DISKIMGDIR}/_.disk.image
  xz -f ${NANO_DISKIMGDIR}/_.disk.full
  ) > ${NANO_OBJ}/_.cdi 2>&1
}

customize_cmd cust_nobeastie
customize_cmd cust_nosdhcihs
customize_cmd cust_comconsole
customize_cmd cust_data_mount
customize_cmd cust_data_home
customize_cmd cust_allow_ssh_root
customize_cmd cust_install_files
customize_cmd cust_fix_files
customize_cmd cust_binmisc_setup
customize_cmd cust_pkgng_fetch
customize_cmd cust_pkgng
customize_cmd cust_binmisc_cleanup
